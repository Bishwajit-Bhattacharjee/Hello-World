#include <bits/stdc++.h>
using namespace std;
typedef long long LL;

struct Edge {
  int u, v;
  LL cap, flow;
  Edge() {}
  Edge(int u, int v, LL cap): u(u), v(v), cap(cap), flow(0) {}
};

struct Dinic {
  int N;
  vector<Edge> E;
  vector<vector<int>> g;
  vector<int> d, pt;

  Dinic(int N): N(N), E(0), g(N), d(N), pt(N) {}

  void AddEdge(int u, int v, LL cap) {
    if (u != v) {
      E.emplace_back(u, v, cap);
      g[u].emplace_back(E.size() - 1);
      E.emplace_back(v, u, 0);
      g[v].emplace_back(E.size() - 1);
    }
  }

  bool BFS(int S, int T) {
    queue<int> q({S});
    fill(d.begin(), d.end(), N + 1);
    d[S] = 0;
    while(!q.empty()) {
      int u = q.front(); q.pop();
      if (u == T) break;
      for (int k: g[u]) {
        Edge &e = E[k];
        if (e.flow < e.cap && d[e.v] > d[e.u] + 1) {
          d[e.v] = d[e.u] + 1;
          q.emplace(e.v);
        }
      }
    }
    return d[T] != N + 1;
  }

  LL DFS(int u, int T, LL flow = -1) {
    if (u == T || flow == 0) return flow;
    for (int &i = pt[u]; i < g[u].size(); ++i) {
      Edge &e = E[g[u][i]];
      Edge &oe = E[g[u][i]^1];
      if (d[e.v] == d[e.u] + 1) {
        LL amt = e.cap - e.flow;
        if (flow != -1 && amt > flow) amt = flow;
        if (LL pushed = DFS(e.v, T, amt)) {
          e.flow += pushed;
          oe.flow -= pushed;
          return pushed;
        }
      }
    }
    return 0;
  }

  LL MaxFlow(int S, int T) {
    LL total = 0;
    while (BFS(S, T)) {
      fill(pt.begin(), pt.end(), 0);
      while (LL flow = DFS(S, T))
        total += flow;
    }
    return total;
  }
};

int main()
{
    int t, caseNo = 0;
    cin >> t;

    while(t--)
    {
        int n;
        scanf("%d",&n);
        vector < int > a(n);
        for(int i = 0; i < n; i++)
            scanf("%d",&a[i]);
        int m;
        scanf("%d",&m);
        vector < int > b(m);
        for(int i = 0; i < m; i++)
            scanf("%d",&b[i]);

        Dinic dinic(2 + n + m );
        int S = 0, T = 2 + n + m - 1;

        for(int i = 0; i < n; i++)
        {
            dinic.AddEdge(0,i+1,1);
        }
        for(int i = 0,id = n+1; i < m; id++,i++)
        {
            dinic.AddEdge(id,T,1);
        }

        for(int i = 0; i < n; i++)
        {
            if(!a[i]) continue;
            for(int j = 0; j < m; j++)
            {

                    if(b[j] % a[i] == 0)
                        dinic.AddEdge(i+1,j+n+1,1);
//                }
            }
        }
        printf("Case %d: %lld\n",++caseNo, dinic.MaxFlow(S,T));

    }
    return 0;
}
